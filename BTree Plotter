/*
    Author: Jonathan Chew, Nilei Pan, Caleb Ling, Leighton Glim
    Assignment Title: B+ Tree Visualization
    Assignment Description: creating an SDL Plotter visualization of a B+ Tree
    Due Date: 12/9/2019
    Date Created: 11/28/2019
    Date Last Modified: 12/9/2019

*/


#ifndef B_TREE_BTREENODE_H
#define B_TREE_BTREENODE_H

#include <iostream>
#include <vector>
#include <cmath>
#include <queue>
#include <algorithm>
#include <fstream>
#include <sstream>
#include "SDLPlotter.h"
#include "rectangle.h"
#include "line.h"

using namespace std;

class Bptree {
private:

    //degree of the tree
    int order;



    struct node {
        point upperLeft,downRight;
        rectangle it;
        node* parent;
        vector<int> key;
        bool isleaf;
        int value;
        vector<node*> children;
        node *leftSib = nullptr,*rightSib = nullptr;

        node() {

            rectangle it;
            parent = nullptr;
            isleaf = true;
            vector<int> key[7];
            vector<rectangle> keyBlock[7];
            vector<node*> children[9];
            leftSib = nullptr;
            rightSib = nullptr;
        }

        ~node(){};
    };

    node* root = nullptr;

    //element that last visited
    node* last_visited = nullptr;

public:

    Bptree(int o){
        root = nullptr;
        order = o;

    }

    ~Bptree(){
        destruct(root);
    }

    void destruct(node * ptr){
        if(ptr){
            for(int i = 0; i<ptr->children.size(); i++){
                destruct(ptr->children[i]);
            }
            delete ptr;
        }
    }

    node* search(int x, SDL_Plotter * g=nullptr, const bool * insertion = nullptr) {
        node* v = root;
        int i;
        while (v) {
            if(g){
                stringstream ss;
                string message;
                if(insertion){
                    ss << "INSERTING ";
                }
                ss << x;
                message = ss.str();
                vector<int> w, y;
                xDimension(w, y);
                drawGraph(*g, w, y, v);
                plotNumber(message, 1, point(1200, 25), *g, color(0, 0, 0));
                g->update();
                g->Sleep(200);
            }
            for (i = 0; i < v->key.size() && x >= v->key[i] ; i++){
                if (x == v->key[i] && v->isleaf) {
                    last_visited = v;
                    return v;
                }
            }

            last_visited = v;
            if(hasChildren(v)){
                v = v->children[i];
            }else{
                return nullptr;
            }
        }
        return nullptr;
    }

    size_t findPos(vector<int> arr,int comp) {
        size_t i;
        for (i = 0; i < arr.size() && comp > arr[i]; i++) {}
        return i;
    }

    bool hasChildren(node* n) {
        return n->children.size()!= 0;
    }

    void shiftRight(node* n,size_t pos){
        for(size_t i = n->key.size(); i > pos; i--){
            n->key.insert(n->key.begin()+i,n->key[i-1]);
        }
    }

    template <typename T>
    void shiftRight(vector<T> v,size_t pos){
        for(size_t i = v.size(); i > pos; i--){
            v.insert(v.begin()+i,v[i-1]);
        }
    }

    void solveOverFlow(node* ptr) {
        while (ptr && ptr->key.size() >= order) {
            size_t pivot;
            if(order%2==1){
                pivot = order/2;
            }else{
                pivot=(order+1)/2;
            }
            if(!ptr->isleaf){
                //create a right children
                node* rc = new node();
                rc->leftSib = ptr;
                if(ptr->rightSib){
                    rc->rightSib = ptr->rightSib;
                    rc->rightSib->leftSib = rc;
                }

                ptr->rightSib = rc;
                if(root == ptr && !hasChildren(root)){
                    for (int i = pivot; i < ptr->key.size(); i++) {
                        rc->key.push_back(ptr->key[i]);
                    }
                    ptr->key.erase(ptr->key.begin() + pivot, ptr->key.end());
                    node* temp = new node();
                    temp->isleaf = false;
                    rc->parent = temp;
                    //new root has the key that suppose to be pushed up
                    temp->key.push_back(rc->key[0]);
                    //store the children in new root
                    temp->children.push_back(ptr);
                    temp->children.push_back(rc);
                    this->root = temp;
                    ptr->parent = root;
                    ptr->isleaf = true;
                }else{
                    int pushed = ptr->key[pivot];
                    for (int i = pivot + 1; i < ptr->key.size(); i++) {
                        rc->key.push_back(ptr->key[i]);
                    }
                    ptr->key.erase(ptr->key.begin() + pivot, ptr->key.end());
                    if (hasChildren(ptr)) {
                        for (size_t i = pivot + 1,j = 0; i < ptr->children.size(); i++,j++) {
                            rc->children.push_back(ptr->children[i]);
                            rc->children[j]->parent = rc;
                        }


                        ptr->children.erase(ptr->children.begin() + pivot+1, ptr->children.end());
                    }
                    rc->isleaf = false;
                    ptr->isleaf = false;
                    if (root == ptr) {
                        node* temp = new node();
                        temp->isleaf = false;
                        rc->parent = temp;

                        temp->key.push_back(pushed);
                        //store the children in new root
                        temp->children.push_back(ptr);
                        temp->children.push_back(rc);
                        this->root = temp;
                        ptr->parent = root;
                    }
                    else {
                        size_t pos = findPos(ptr->parent->key, ptr->key[pivot]);
                        shiftRight(ptr->parent->key, pos);

                        ptr->parent->key.insert(ptr->parent->key.begin()+pos,pushed);
                        shiftRight(ptr->parent->children, pos + 1);

                        //ptr->parent->children.insert(ptr->parent->children.begin()+pos,ptr);
                        ptr->parent->children.insert(ptr->parent->children.begin()+pos+1,rc);
                        rc->parent = ptr->parent;
                    }
                }
            }else{

                size_t pos = findPos(ptr->parent->key, ptr->key[pivot]);

                shiftRight(ptr->parent->key,pos);
                ptr->parent->key.insert(ptr->parent->key.begin()+pos,ptr->key[pivot]);

                if(pos == 0){
                    node* left = new node();
                    left->rightSib = ptr;
                    ptr->leftSib = left;
                    for(size_t i = 0; i < pivot; i++){
                        left->key.push_back(ptr->key[i]);
                    }
                    left->parent = ptr->parent;
                    size_t i = pivot,j = 0,size = ptr->key.size();
                    for(i,j; i < size; i++,j++){
                        swap(ptr->key[j], ptr->key[i]);
                    }
                    ptr->key.erase(ptr->key.begin()+j,ptr->key.end());


                    shiftRight(ptr->parent->children,0);
                    ptr->parent->children.insert(ptr->parent->children.begin(), left);
                    left->parent = ptr->parent;

                }else{
                    node* right = new node();
                    right->leftSib = ptr;
                    if(ptr->rightSib){
                        right->rightSib = ptr->rightSib;
                        right->rightSib->leftSib = right;
                    }

                    ptr->rightSib = right;
                    for(size_t i = pivot; i < ptr->key.size(); i++){
                        right->key.push_back(ptr->key[i]);

                    }
                    ptr->key.erase(ptr->key.begin()+pivot,ptr->key.end());


                    shiftRight(ptr->parent->children,pos+1);
                    ptr->parent->children.insert(ptr->parent->children.begin()+pos+1,right);
                    right->parent = ptr->parent;



                }

            }

            ptr = ptr->parent;


        }
    }


    //insert success or not, not tested as well
    bool insert(int item, SDL_Plotter * g = nullptr) {
        node * y;
        if(g){
            bool insertion = true;
            y = search(item, g, &insertion);
        }else{
            y = search(item);
        }
        if (y) {
            return false;
        }
        if (root == nullptr) {
            root = new node();
            root->isleaf = false;
            root->key.push_back(item);
            last_visited = root;

        }else if(!hasChildren(root)){
            size_t pos = findPos(root->key,item);

            shiftRight(root->key,pos);
            root->key.insert(root->key.begin()+pos,item);
        }
        else {


            int i = findPos(last_visited->key, item);
            shiftRight(last_visited->key,i);

            //store the item
            last_visited->key.insert(last_visited->key.begin()+i,item);
        }

        solveOverFlow(last_visited);
    }

    int findPosDelete(vector<int> arr,int comp) {
        int i;
        for (i = 0; i < arr.size() && comp > arr[i]; i++) {}
        if(arr[i]!=comp){
            i = -1;
        }
        return i;
    }

    node* searchDelete(int x, SDL_Plotter * g=nullptr, const bool* deletion=nullptr) {
        node* v = root;
        bool isKey = false;
        int posOfKey;
        node * keyPtr = nullptr;
        int i;
        while (v) {
            for (i = 0; i < v->key.size() && x >= v->key[i] ; i++){
                if(g){
                    stringstream ss;
                    string message;
                    if(deletion){
                        ss << "DELETING ";
                    }
                    ss << x;
                    message = ss.str();
                    vector<int> w, y;
                    xDimension(w, y);
                    drawGraph(*g, w, y, v);
                    plotNumber(message, 1, point(1200, 25), *g, color(0, 0, 0));
                    g->update();
                    g->Sleep(1000);

                }
                if (x == v->key[i]) {
                    if(v->isleaf){
                        if(isKey && v->key.size()>1){
                            keyPtr->key[posOfKey]=v->key[1];
                        }
                        last_visited = v;
                        return v;
                    }
                    else{
                        isKey = true;
                        keyPtr = v;
                        posOfKey = i;
                    }
                }
            }
            last_visited = v;
            if(hasChildren(v)){
                v = v->children[i];
            }else{
                return nullptr;
            }
            i = 0;
        }
        return nullptr;

    }

    bool remove(int item, SDL_Plotter * g = nullptr){
        if (!root) {
            return false;
        }else if(!hasChildren(root)){
            int pos = findPosDelete(root->key, item);
            if(pos==-1){
                return false;
            }
            root->key.erase(root->key.begin()+pos);
        }else{
            node * y;
            if(g){
                bool deletion = true;
                y = searchDelete(item, g, &deletion);
            }else{
                y = searchDelete(item);
            }
            if(!y){
                return false;
            }
            int pos = findPosDelete(last_visited->key, item);
            int min = ceil((static_cast<double>(order)/2.0))-1;
            last_visited->key.erase(last_visited->key.begin()+pos);
            if(last_visited->key.size() <min){
                solveUnderFlow(last_visited,item);
            }
        }
    }

   void solveUnderFlow(node* ptr,int item){
        int min = ceil((static_cast<double>(order)/2.0))-1;
        bool newRoot = false;


        while(!newRoot && (ptr->key.size() < min || ptr->children.size() == ptr->key.size())){
            this->levelOrder(cout);
            int x = findPos(ptr->key,item);


            if(!ptr->key.empty() && ptr->key.size() != x && ptr->key[x] == item){
                ptr->key.erase(ptr->key.begin()+x);
            }
            if(ptr->key.size() >= min && ptr->children.size() >  ptr->key.size()){
                return;
            }else if(ptr == root && ptr->children.size() > ptr->key.size()){
                return;
            }




            if(ptr->leftSib && ptr->leftSib->key.size() > min){
                int pos1 = findPos(ptr->parent->key,ptr->leftSib->key[ptr->leftSib->key.size()-1]);
                ptr->parent->key.insert(ptr->parent->key.begin()+pos1,ptr->leftSib->key[ptr->leftSib->key.size()-1]);
                ptr->leftSib->key.pop_back();
                if(ptr->parent->key[ptr->parent->key.size()-1] == item){
                    ptr->key.insert(ptr->key.begin(),ptr->parent->key[pos1]);

                }else{
                    ptr->key.push_back(ptr->parent->key[ptr->parent->key.size()-1]);
                }

                ptr->parent->key.pop_back();

                if(hasChildren(ptr->leftSib)){
                    ptr->children.insert(ptr->children.begin(),ptr->leftSib->children[ptr->leftSib->children.size()-1]);
                    ptr->children[0]->parent = ptr;
                    ptr->leftSib->children.pop_back();
                }
            }

            else if(ptr->rightSib && ptr->rightSib->key.size() > min){
                if(ptr->rightSib->isleaf){
                    int pos2 = findPos(ptr->parent->key,ptr->rightSib->key[1]);
                    ptr->parent->key.insert(ptr->parent->key.begin()+pos2,ptr->rightSib->key[1]);
                    ptr->key.push_back(ptr->parent->key[0]);
                    ptr->rightSib->key.erase(ptr->rightSib->key.begin());
                    ptr->parent->key.erase(ptr->parent->key.begin());
                }else{
                    int pos2 = findPos(ptr->parent->key,ptr->rightSib->key[0]);

                    ptr->parent->key.insert(ptr->parent->key.begin()+pos2,ptr->rightSib->key[0]);
                    ptr->key.push_back(ptr->parent->key[0]);
                    ptr->rightSib->key.erase(ptr->rightSib->key.begin());
                    ptr->parent->key.erase(ptr->parent->key.begin());
                    if(hasChildren(ptr->rightSib)){
                        ptr->children.push_back(ptr->rightSib->children[0]);
                        ptr->children[ptr->children.size()-1]->parent = ptr;
                        ptr->rightSib->children.erase(ptr->rightSib->children.begin());
                    }
                }


            }else if(ptr->isleaf){
                if(ptr->leftSib && ptr->leftSib->parent == ptr->parent){
                    int k = ptr->key[0];
                    int pos3 = findPos(ptr->parent->key,k);
                    if(ptr->parent->key[pos3] == k){
                        ptr->parent->key.erase(ptr->parent->key.begin()+pos3);
                    }
                    for(int i = 0; i < ptr->leftSib->key.size(); i++){
                        ptr->key.insert(ptr->key.begin()+i,ptr->leftSib->key[i]);
                    }
                    int pos;
                    for( pos = 0; pos < ptr->parent->children.size() && ptr->parent->children[pos]!=ptr->leftSib; pos++){}
                    ptr->parent->children.erase(ptr->parent->children.begin()+pos);

                    if(ptr->leftSib && ptr->leftSib->leftSib){
                        ptr->leftSib = ptr->leftSib->leftSib;
                        ptr->leftSib->rightSib = ptr;
                    }




                }else if(ptr->rightSib && ptr->rightSib->parent == ptr->parent){


                    int p = ptr->rightSib->key[0];
                    for(int i = 0; i < ptr->rightSib->key.size(); i++){
                        ptr->key.push_back(ptr->rightSib->key[i]);
                    }
                    int pos;
                    for( pos = 0; pos < ptr->parent->children.size() && ptr->parent->children[pos]!=ptr->rightSib; pos++){}
                    ptr->parent->children.erase(ptr->parent->children.begin()+pos);
                    int pos4 = findPos(ptr->parent->key,p);
                    if(ptr->parent->key[pos4] == p){
                        ptr->parent->key.erase(ptr->parent->key.begin()+pos4);
                    }

                    int po = findPos(ptr->parent->key,p);
                    if(ptr->key.size() != 0 && ptr->key[po] == p){
                        ptr->parent->key.erase(ptr->parent->key.begin()+po);
                    }

                    if(ptr->rightSib && ptr->rightSib->rightSib){
                        ptr->rightSib = ptr->rightSib->rightSib;
                        ptr->rightSib->leftSib = ptr;
                    }


                }

            }else{
                if(ptr->leftSib && ptr->leftSib->parent == ptr->parent){
                    int i;
                    for(i = 0; i < ptr->parent->children.size() && ptr->leftSib != ptr->parent->children[i]; i++){}
                    int k = ptr->parent->key[i];
                    ptr->parent->key.erase(ptr->parent->key.begin()+i);
                    ptr->parent->children.erase(ptr->parent->children.begin()+i);
                    ptr->key.insert(ptr->key.begin(),k);
                    for(int j = 0; j < ptr->leftSib->key.size(); j++){
                        ptr->key.insert(ptr->key.begin()+j,ptr->leftSib->key[j]);
                    }
                    for(int k = 0; k < ptr->leftSib->children.size(); k++){
                        ptr->children.insert(ptr->children.begin()+k,ptr->leftSib->children[k]);
                    }

                    if(ptr->leftSib && ptr->leftSib->leftSib){
                        ptr->leftSib = ptr->leftSib->leftSib;
                        ptr->leftSib->rightSib = ptr;
                    }



                    for(int o = 0; o < ptr->children.size();o++){
                        ptr->children[o]->parent = ptr;
                    }


                }else if(ptr->rightSib && ptr->rightSib->parent == ptr->parent){
                    int i;
                    for(i = 0; i < ptr->parent->children.size() && ptr->rightSib != ptr->parent->children[i]; i++){}
                    int k = ptr->parent->key[i-1];
                    ptr->parent->key.erase(ptr->parent->key.begin()+i-1);
                    ptr->parent->children.erase(ptr->parent->children.begin()+i);
                    ptr->key.push_back(k);
                    for(int j = 0; j < ptr->rightSib->key.size(); j++){
                        ptr->key.push_back(ptr->rightSib->key[j]);
                    }
                    for(int k = 0; k < ptr->rightSib->children.size(); k++){
                        ptr->children.push_back(ptr->rightSib->children[k]);
                    }
                    if(ptr-> rightSib && ptr->rightSib->rightSib){
                        ptr->rightSib = ptr->rightSib->rightSib;
                        ptr->rightSib->leftSib = ptr;
                    }


                    for(int o = 0; o < ptr->children.size();o++){
                        ptr->children[o]->parent = ptr;
                    }

                }





            }


            if(ptr->parent == root && root->key.empty()){
                ptr->parent = nullptr;
                ptr->leftSib = nullptr;
                ptr->rightSib = nullptr;
                root = ptr;
                newRoot = true;
            }else if(ptr->parent == root && root->key.size() == 1 && root->key[0] == item){
                ptr->leftSib = nullptr;
                ptr->rightSib = nullptr;
                ptr->parent = nullptr;
                root = ptr;
                newRoot = true;
            }

            ptr = ptr->parent;

        }

    }

    void xDimension(vector<int>& v, vector<int>& y){
        while(!v.empty()){
            v.pop_back();
        }
        while(!y.empty()){
            y.pop_back();
        }
        queue<node *> queue1, queue2;
        int count = 0, numNodes = 0;
        if(!root){
            return;
        }
        bool updated = false;
        queue1.push(root);
        while(!queue1.empty() || !queue2.empty()){
            while(!queue1.empty()){
                if(hasChildren(queue1.front())){
                    for (auto i : queue1.front()->children) {
                        queue2.push(i);
                    }
                }
                numNodes++;
                count+=queue1.front()->key.size()*60+10;
                queue1.pop();
            }
            v.push_back(count);
            y.push_back(numNodes);
            updated = true;
            if(!queue2.empty()){
                count=0;
                numNodes=0;
                updated = false;
            }
            while(!queue2.empty()){
                if(hasChildren(queue2.front())){
                    for (auto i : queue2.front()->children) {
                        queue1.push(i);
                    }
                }
                numNodes++;
                count+=queue2.front()->key.size()*60+10;
                queue2.pop();
            }
            if(!updated){
                v.push_back(count);
                y.push_back(numNodes);
            }
            if(!queue1.empty()){
                count = 0;
                numNodes = 0;
            }
        }
    }

    void printDigit(SDL_Plotter &g, int a, point P, color color1, int scale) {
        ifstream input;
        int rows, cols;
        switch(a){
            case 0:
                input.open("0.txt");
                break;
            case 1:
                input.open("1.txt");
                break;
            case 2:
                input.open("2.txt");
                break;
            case 3:
                input.open("3.txt");
                break;
            case 4:
                input.open("4.txt");
                break;
            case 5:
                input.open("5.txt");
                break;
            case 6:
                input.open("6.txt");
                break;
            case 7:
                input.open("7.txt");
                break;
            case 8:
                input.open("8.txt");
                break;
            case 9:
                input.open("9.txt");
                break;
            default:
                break;
        }
        input >> rows >> cols;
        char letter[rows][cols];
        for(int r = 0; r < rows; r++){
            for(int c = 0; c < cols; c++){
                input >> letter[r][c];
            }
        }
        for(int y = 0; y < rows; y++){
            for(int x = 0; x < cols; x++){
                for(int r=0; r<scale; r++){
                    for(int c=0; c<scale; c++){
                        if(letter[y][x]=='1'){
                            g.plotPixel(P.x+scale*x+r, P.y+scale*y+c, color1.R, color1.G, color1.B);
                        }
                    }
                }
            }
        }
        input.close();

    }

    void printLetter(SDL_Plotter &g, char a, point P, color color1, int scale) {
        ifstream input;
        int rows, cols;
        switch(a){
            case 'A':
                input.open("A.txt");
                break;
            case 'B':
                input.open("B.txt");
                break;
            case 'C':
                input.open("C.txt");
                break;
            case 'D':
                input.open("D.txt");
                break;
            case 'E':
                input.open("E.txt");
                break;
            case 'F':
                input.open("F.txt");
                break;
            case 'G':
                input.open("G.txt");
                break;
            case 'H':
                input.open("H.txt");
                break;
            case 'I':
                input.open("1.txt");
                break;
            case 'J':
                input.open("J.txt");
                break;
            case 'K':
                input.open("K.txt");
                break;
            case 'L':
                input.open("L.txt");
                break;
            case 'M':
                input.open("M.txt");
                break;
            case 'N':
                input.open("N.txt");
                break;
            case 'O':
                input.open("O.txt");
                break;
            case 'P':
                input.open("P.txt");
                break;
            case 'Q':
                input.open("Q.txt");
                break;
            case 'R':
                input.open("R.txt");
                break;
            case 'S':
                input.open("S.txt");
                break;
            case 'T':
                input.open("T.txt");
                break;
            case 'U':
                input.open("U.txt");
                break;
            case 'V':
                input.open("V.txt");
                break;
            case 'W':
                input.open("W.txt");
                break;
            case 'X':
                input.open("X.txt");
                break;
            case 'Y':
                input.open("Y.txt");
                break;
            case 'Z':
                input.open("Z.txt");
                break;
            default:
                break;
        }
        input >> rows >> cols;
        char letter[rows][cols];
        for(int r = 0; r < rows; r++){
            for(int c = 0; c < cols; c++){
                input >> letter[r][c];
            }
        }
        for(int y = 0; y < rows; y++){
            for(int x = 0; x < cols; x++){
                for(int r=0; r<scale; r++){
                    for(int c=0; c<scale; c++){
                        if(letter[y][x]=='1'){
                            g.plotPixel(P.x+scale*x+r, P.y+scale*y+c, color1.R, color1.G, color1.B);
                        }
                    }
                }
            }
        }
        input.close();

    }

    void plotNumber(const string message, int scale, point P, SDL_Plotter &g, color C) {
        size_t n=0;
        while(n<message.length()){
            switch(message[n]){
                case '0':
                    printDigit(g, 0, P, C, scale);
                    P.x+=(18*scale);
                    break;
                case '1':
                    printDigit(g, 1, P, C, scale);
                    P.x+=(18*scale);
                    break;
                case '2':
                    printDigit(g, 2, P, C, scale);
                    P.x+=(18*scale);
                    break;
                case '3':
                    printDigit(g, 3, P, C, scale);
                    P.x+=(18*scale);
                    break;
                case '4':
                    printDigit(g, 4, P, C, scale);
                    P.x+=(18*scale);
                    break;
                case '5':
                    printDigit(g, 5, P, C, scale);
                    P.x+=(18*scale);
                    break;
                case '6':
                    printDigit(g, 6, P, C, scale);
                    P.x+=(18*scale);
                    break;
                case '7':
                    printDigit(g, 7, P, C, scale);
                    P.x+=(18*scale);
                    break;
                case '8':
                    printDigit(g, 8, P, C, scale);
                    P.x+=(18*scale);
                    break;
                case '9':
                    printDigit(g, 9, P, C, scale);
                    P.x+=(18*scale);
                    break;
                case 'A':
                    printLetter(g, 'A', P, C, scale);
                    P.x+=(20*scale);
                    break;
                case 'B':
                    printLetter(g, 'B', P, C, scale);
                    P.x+=(16*scale);
                    break;
                case 'C':
                    printLetter(g, 'C', P, C, scale);
                    P.x+=(20*scale);
                    break;
                case 'D':
                    printLetter(g, 'D', P, C, scale);
                    P.x+=(20*scale);
                    break;
                case 'E':
                    printLetter(g, 'E', P, C, scale);
                    P.x+=(14*scale);
                    break;
                case 'F':
                    printLetter(g, 'F', P, C, scale);
                    P.x+=(14*scale);
                    break;
                case 'G':
                    printLetter(g, 'G', P, C, scale);
                    P.x+=(20*scale);
                    break;
                case 'H':
                    printLetter(g, 'H', P, C, scale);
                    P.x+=(20*scale);
                    break;
                case 'I':
                    printLetter(g, 'I', P, C, scale);
                    P.x+=(13*scale);
                    break;
                case 'J':
                    printLetter(g, 'J', P, C, scale);
                    P.x+=(17*scale);
                    break;
                case 'K':
                    printLetter(g, 'K', P, C, scale);
                    P.x+=(14*scale);
                    break;
                case 'L':
                    printLetter(g, 'L', P, C, scale);
                    P.x+=(13*scale);
                    break;
                case 'M':
                    printLetter(g, 'M', P, C, scale);
                    P.x+=(20*scale);
                    break;
                case 'N':
                    printLetter(g, 'N', P, C, scale);
                    P.x+=(20*scale);
                    break;
                case 'O':
                    printLetter(g, 'O', P, C, scale);
                    P.x+=(22*scale);
                    break;
                case 'P':
                    printLetter(g, 'P', P, C, scale);
                    P.x+=(14*scale);
                    break;
                case 'Q':
                    printLetter(g, 'Q', P, C, scale);
                    P.x+=(22*scale);
                    break;
                case 'R':
                    printLetter(g, 'R', P, C, scale);
                    P.x+=(14*scale);
                    break;
                case 'S':
                    printLetter(g, 'S', P, C, scale);
                    P.x+=(14*scale);
                    break;
                case 'T':
                    printLetter(g, 'T', P, C, scale);
                    P.x+=(18*scale);
                    break;
                case 'U':
                    printLetter(g, 'U', P, C, scale);
                    P.x+=(18*scale);
                    break;
                case 'V':
                    printLetter(g, 'V', P, C, scale);
                    P.x+=(18*scale);
                    break;
                case 'W':
                    printLetter(g, 'W', P, C, scale);
                    P.x+=(20*scale);
                    break;
                case 'X':
                    printLetter(g, 'X', P, C, scale);
                    P.x+=(20*scale);
                    break;
                case 'Y':
                    printLetter(g, 'Y', P, C, scale);
                    P.x+=(19*scale);
                    break;
                case 'Z':
                    printLetter(g, 'Z', P, C, scale);
                    P.x+=(16*scale);
                    break;
                default:
                    P.x+=(16*scale);
                    break;
            }
            n++;
        }
    }

    void drawNode(SDL_Plotter& g, node * ptr, point P, color C){
        string arr;
        int num;
        stringstream ss;
        for (int i : ptr->key) {
            num = i;
            if(0<=num && num<10){
                ss << "00";
            }else if(10<=num && num<100){
                ss << "0";
            }
            ss << num;
            ss >> arr;
            ss.clear();
            rectangle rec(P, point(P.x+60, P.y+25));
            rec.drawOutline(g, C);
            plotNumber(arr, 1, point(P.x+5, P.y+2), g, C);
            P.x+=60;
        }
    }

    void levelOrder(ostream& os){
        queue<node *> queue1, queue2;
        if(!root){
            os << "NULL" << endl;
            return;
        }
        queue1.push(root);
        while(!queue1.empty() || !queue2.empty()){
            while(!queue1.empty()){
                if(hasChildren(queue1.front())){
                    for (int i = 0; i<queue1.front()->children.size(); i++){
                        queue2.push(queue1.front()->children[i]);
                    }
                }
                for(int i = 0; i<queue1.front()->key.size(); i++){
                    if(!queue1.front()->isleaf && queue1.front()!=root){
                        os << "K: ";
                    }
                    os << queue1.front()->key[i] << " ";
                }
                queue1.pop();
                os << "   ";
            }
            os << endl;
            while(!queue2.empty()){
                if(hasChildren(queue2.front())){
                    for (int i = 0; i<queue2.front()->children.size(); i++) {
                        queue1.push(queue2.front()->children[i]);
                    }
                }
                for(int i = 0; i<queue2.front()->key.size(); i++){
                    if(!queue2.front()->isleaf && queue2.front()!=root){
                        os << "K: ";
                    }
                    os << queue2.front()->key[i] << " ";
                }
                queue2.pop();
                os << "   ";
            }
            os << endl;
        }
        os << endl;
    }

    void drawGraph(SDL_Plotter &plotter, const vector<int>& v, const vector<int>& numNodes, node * ptr = nullptr){
        plotter.clear();
        queue<node *> queue1, queue2;
        queue1.push(root);
        int x, y=5, level = -1, dist, line1Iterator, line2Iterator;
        line connector1[numNodes.back()], connector2[numNodes.back()];
        while(!queue1.empty() || !queue2.empty()){
            level++;
            if(v.back()==v[level]){
                dist=10;
            }else{
                dist = (v.back()-v[level])/(numNodes[level]+1);
            }
            x = dist;
            line1Iterator=line2Iterator=0;
            while(!queue1.empty()){
                if(hasChildren(queue1.front())){
                    for (auto i : queue1.front()->children) {
                        queue2.push(i);
                    }
                }
                if(queue1.front()==ptr){
                    drawNode(plotter, queue1.front(), point(x, y), color(RED));
                }else{
                    drawNode(plotter, queue1.front(), point(x, y), color(0, 0, 0));
                }
                for(int i = 0; i<queue1.front()->children.size(); i++){
                    connector1[line1Iterator].setP1(point(x+i*60, y+25));
                    line1Iterator++;
                }
                connector2[line2Iterator].setP2(point(x+(queue1.front()->key.size()*60)/2, y));
                x+=queue1.front()->key.size()*60+dist;
                queue1.pop();
                line2Iterator++;
            }
            if(level!=0){
                for(int i=0; i<line2Iterator; i++){
                    connector2[i].draw(plotter);
                }
            }
            line1Iterator = line2Iterator = 0;
            y+=50+level*50;
            level++;
            if(v.back()==v[level]){
                dist=10;
            }else{
                dist = (v.back()-v[level])/(numNodes[level]+1);
            }
            x = dist;
            while(!queue2.empty()){
                if(hasChildren(queue2.front())){
                    for (auto i : queue2.front()->children) {
                        queue1.push(i);
                    }
                }
                if(queue2.front()==ptr){
                    drawNode(plotter, queue2.front(), point(x, y), color(RED));
                }else{
                    drawNode(plotter, queue2.front(), point(x, y), color(0, 0, 0));
                }
                for(int i = 0; i<queue2.front()->children.size(); i++){
                    connector2[line2Iterator].setP1(point(x+i*60, y+25));
                    line2Iterator++;
                }
                connector1[line1Iterator].setP2(point(x+(queue2.front()->key.size()*60)/2, y));
                x+=queue2.front()->key.size()*60+dist;
                queue2.pop();
                line1Iterator++;
            }
            for(int i=0; i<line1Iterator; i++){
                connector1[i].draw(plotter);
            }
            y+=50+level*50;
        }
        plotter.update();
    }
};

#endif //B_TREE_BTREENODE_H
